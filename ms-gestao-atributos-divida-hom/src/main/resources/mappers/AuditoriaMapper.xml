<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AuditoriaDao">

    <select id="countHistorysUpdatesOrigemDebito" resultType="int">
        SELECT COUNT(*)
        FROM tb_auditoria a
        INNER JOIN tb_origem_debito_aud oda ON a.ci_auditoria = oda.cd_auditoria
        WHERE a.ci_auditoria IS NOT NULL
        AND oda.ci_origem_debito = #{idOrigemDebito}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_origem_debito_aud
        WHERE
        ci_origem_debito = #{idOrigemDebito}
        AND tp_movimento = #{tipoMovimento}
        );
    </select>


    <resultMap id="resultMapAuditoria" type="br.gov.ce.pge.gestao.dto.response.AuditoriaOrigemDebitoDto">

        <result property="idOrigemDebito" column="ci_origem_debito"/>
        <result property="dataMovimento" column="dt_movimento"/>
        <result property="nomeUsuario" column="nm_usuario"/>
        <result property="dadosAntigos" column="ds_dados_antigos"/>
        <result property="descricao" column="ds_origem_debito"/>
        <result property="nome" column="nm_origem_debito"/>
        <result property="situacao" column="ds_situacao_origem_debito"/>

    </resultMap>

    <select id="findHistorysUpdates" resultMap="resultMapAuditoria">
        SELECT a.dt_movimento, a.nm_usuario, a.ds_dados_antigos,
        oda.ds_origem_debito, oda.nm_origem_debito, oda.ds_situacao_origem_debito
        FROM tb_auditoria a
        INNER JOIN tb_origem_debito_aud oda ON a.ci_auditoria = oda.cd_auditoria
        WHERE a.ci_auditoria IS NOT NULL
        AND oda.ci_origem_debito = #{idOrigemDebito}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_origem_debito_aud
        WHERE
        ci_origem_debito = #{idOrigemDebito}
        AND tp_movimento = #{tipoMovimentoDelete}
        )
        ORDER BY a.ci_auditoria DESC
        OFFSET #{offset} ROWS
        FETCH NEXT #{limit} ROWS ONLY
    </select>


    <select id="countHistorysUpdatesProdutoServico" resultType="int">
        SELECT COUNT(distinct(a.ci_auditoria)) AS total_registros
        FROM tb_auditoria a
        INNER JOIN tb_produto_servico_aud oda ON a.ci_auditoria = oda.cd_auditoria
        LEFT JOIN tb_produto_servico_receita_aud tro ON a.ci_auditoria = tro.cd_auditoria
        WHERE
        a.ci_auditoria IS NOT NULL
        AND oda.ci_produto_servico= #{idProdutoServico}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_produto_servico_aud
        WHERE
        ci_produto_servico = #{idProdutoServico}
        AND tp_movimento = #{tipoMovimento}
        )

    </select>

    <resultMap id="resultMapAuditoriaProdutoServico"
               type="br.gov.ce.pge.gestao.dto.response.AuditoriaProdutoServicoDto">

        <result property="idProdutoServico" column="ci_produto_servico"/>
        <result property="dataMovimento" column="dt_movimento"/>
        <result property="nomeUsuario" column="nm_usuario"/>
        <result property="dadosAntigos" column="ds_dados_antigos"/>
        <result property="descricao" column="ds_produto_servico"/>
        <result property="situacao" column="ds_situacao_produto_servico"/>
        <result property="codigo" column="cd_produto_servico"/>
        <result property="tipoReceitasAdicionados" column="ids_adicionados"/>
        <result property="tipoReceitasRemovidos" column="ids_removidos"/>

    </resultMap>

    <select id="findHistorysUpdatesProdutoServico" resultMap="resultMapAuditoriaProdutoServico">
        SELECT
        a.ci_auditoria,
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        oda.ds_produto_servico,
        oda.cd_produto_servico,
        oda.ci_produto_servico,
        oda.ds_situacao_produto_servico,
        CONCAT(
        STRING_AGG(CASE WHEN tro.tp_movimento = #{tipoMovimentoInsert} THEN tro.cd_tipo_receita::text END, ','),
        '') AS ids_adicionados,
        CONCAT(
        STRING_AGG(CASE WHEN tro.tp_movimento = #{tipoMovimentoDelete} THEN tro.cd_tipo_receita::text END, ','),
        '') AS ids_removidos
        FROM tb_auditoria a
        INNER JOIN tb_produto_servico_aud oda ON a.ci_auditoria = oda.cd_auditoria
        LEFT JOIN tb_produto_servico_receita_aud tro ON a.ci_auditoria = tro.cd_auditoria
        WHERE
        a.ci_auditoria IS NOT NULL
        AND oda.ci_produto_servico = #{idProdutoServico}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_produto_servico_aud
        WHERE
        ci_produto_servico = #{idProdutoServico}
        AND tp_movimento = #{tipoMovimentoDelete}
        )
        GROUP BY
        a.ci_auditoria,
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        oda.ds_produto_servico,
        oda.cd_produto_servico,
        oda.ds_situacao_produto_servico,
        oda.ci_produto_servico
        ORDER BY
        a.ci_auditoria DESC
        OFFSET #{offset} ROWS
        FETCH NEXT #{limit} ROWS ONLY
    </select>

    <select id="countHistorysUpdatesTipoReceita" resultType="int">
        SELECT COUNT(distinct(a.ci_auditoria)) AS total_registros
        FROM tb_auditoria a
        INNER JOIN tb_tipo_receita_aud oda ON a.ci_auditoria = oda.cd_auditoria
        LEFT JOIN tb_tipo_receita_origem_aud tro ON a.ci_auditoria = tro.cd_auditoria
        WHERE
        a.ci_auditoria IS NOT NULL
        AND oda.ci_tipo_receita = #{idTipoReceita}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_tipo_receita_aud
        WHERE
        ci_tipo_receita = #{idTipoReceita}
        AND tp_movimento = #{tipoMovimento}
        )
    </select>

    <resultMap id="resultMapAuditoriaTipoReceita" type="br.gov.ce.pge.gestao.dto.response.AuditoriaTipoReceitaDto">

        <result property="idTipoReceita" column="ci_tipo_receita"/>
        <result property="dataMovimento" column="dt_movimento"/>
        <result property="nomeUsuario" column="nm_usuario"/>
        <result property="dadosAntigos" column="ds_dados_antigos"/>
        <result property="descricao" column="ds_tipo_receita"/>
        <result property="situacao" column="ds_situacao_tipo_receita"/>
        <result property="codigo" column="cd_tipo_receita"/>
        <result property="natureza" column="ds_natureza_tipo_receita"/>
        <result property="origensDebitosAdicionados" column="ids_adicionados"/>
        <result property="origensDebitosRemovidos" column="ids_removidos"/>

    </resultMap>

    <select id="findHistorysUpdatesTipoReceita" resultMap="resultMapAuditoriaTipoReceita">
        SELECT
        a.ci_auditoria,
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        oda.ds_tipo_receita,
        oda.cd_tipo_receita,
        oda.ds_situacao_tipo_receita,
        oda.ci_tipo_receita,
        oda.ds_natureza_tipo_receita,
        CONCAT(
        STRING_AGG(CASE WHEN tro.tp_movimento = #{tipoMovimentoInsert} THEN tro.cd_origem_debito::text END, ','),
        '') AS ids_adicionados,
        CONCAT(
        STRING_AGG(CASE WHEN tro.tp_movimento = #{tipoMovimentoDelete} THEN tro.cd_origem_debito::text END, ','),
        '') AS ids_removidos
        FROM tb_auditoria a
        INNER JOIN tb_tipo_receita_aud oda ON a.ci_auditoria = oda.cd_auditoria
        LEFT JOIN tb_tipo_receita_origem_aud tro ON a.ci_auditoria = tro.cd_auditoria
        WHERE
        a.ci_auditoria IS NOT NULL
        AND oda.ci_tipo_receita = #{idTipoReceita}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_tipo_receita_aud
        WHERE
        ci_tipo_receita = #{idTipoReceita}
        AND tp_movimento = #{tipoMovimentoDelete}
        )
        GROUP BY
        a.ci_auditoria,
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        oda.ds_tipo_receita,
        oda.cd_tipo_receita,
        oda.ds_situacao_tipo_receita,
        oda.ci_tipo_receita,
        oda.ds_natureza_tipo_receita
        ORDER BY
        a.ci_auditoria DESC
        OFFSET #{offset} ROWS
        FETCH NEXT #{limit} ROWS ONLY
    </select>


    <select id="countHistorysUpdatesFaseDivida" resultType="int">
        SELECT COUNT(*)
        FROM tb_auditoria a
        INNER JOIN tb_fase_divida_aud tfda ON a.ci_auditoria = tfda.cd_auditoria
        WHERE a.ci_auditoria IS NOT NULL
        AND tfda.ci_fase_divida = #{idFaseDivida}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_fase_divida_aud
        WHERE
        ci_fase_divida = #{idFaseDivida}
        AND tp_movimento = #{tipoMovimento}
        );
    </select>

    <select id="findHistorysUpdatesFaseDivida" resultMap="resultMapFaseDivida">
        SELECT
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        tfda.ci_fase_divida,
        tfda.cd_fase_divida,
        tfda.nm_fase_divida,
        tfda.ds_fase_divida,
        tfda.tp_movimentacao,
        tfda.ds_situacao_fase_divida,
        tfda.fl_exigivel_cobranca,
        CONCAT(
        STRING_AGG(CASE WHEN tfdtca.tp_movimento = #{tipoMovimentoInsert} THEN tfdtca.tp_cobranca::text END, ','),
        '') AS ids_adicionados,
        CONCAT(
        STRING_AGG(CASE WHEN tfdtca.tp_movimento = #{tipoMovimentoDelete} THEN tfdtca.tp_cobranca::text END, ','),
        '') AS ids_removidos
        FROM tb_auditoria a
        INNER JOIN tb_fase_divida_aud tfda ON a.ci_auditoria = tfda.cd_auditoria
        LEFT JOIN tb_fase_divida_tp_cobranca_aud tfdtca ON a.ci_auditoria = tfdtca.cd_auditoria
        WHERE a.ci_auditoria IS NOT NULL
        AND tfda.ci_fase_divida = #{idFaseDivida}
        AND NOT EXISTS (
        SELECT 1
        FROM tb_fase_divida_aud
        WHERE
        ci_fase_divida = #{idFaseDivida}
        AND tp_movimento = #{tipoMovimentoDelete}
        )
        group by
        a.ci_auditoria,
        a.dt_movimento,
        a.nm_usuario,
        a.ds_dados_antigos,
        tfda.ci_fase_divida,
        tfda.cd_fase_divida,
        tfda.nm_fase_divida,
        tfda.ds_fase_divida,
        tfda.tp_movimentacao,
        tfda.ds_situacao_fase_divida,
        tfda.fl_exigivel_cobranca
        ORDER BY a.ci_auditoria DESC
        OFFSET #{offset} ROWS
        FETCH NEXT #{limit} ROWS ONLY
    </select>

    <resultMap id="resultMapFaseDivida" type="br.gov.ce.pge.gestao.dto.response.AuditoriaFaseDividaDto">

        <result property="idFaseDivida" column="ci_fase_divida"/>
        <result property="dataMovimento" column="dt_movimento"/>
        <result property="nomeUsuario" column="nm_usuario"/>
        <result property="dadosAntigos" column="ds_dados_antigos"/>
        <result property="codigo" column="cd_fase_divida"/>
        <result property="nome" column="nm_fase_divida"/>
        <result property="descricao" column="ds_fase_divida"/>
        <result property="tipoMovimentacao" column="tp_movimentacao"/>
        <result property="situacao" column="ds_situacao_fase_divida"/>
        <result property="exigeCobranca" column="fl_exigivel_cobranca"/>
        <result property="tipoCobrancasAdicionados" column="ids_adicionados"/>
        <result property="tipoCobrancasRemovidos" column="ids_removidos"/>

    </resultMap>

</mapper>
